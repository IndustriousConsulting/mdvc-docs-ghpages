"use strict";(self.webpackChunkubc_services=self.webpackChunkubc_services||[]).push([[5722],{60:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"usage","title":"Usage","description":"Essentially, mdVC is plugged in AVC technically in the BADI enhancement spot vchhles_core.","source":"@site/docs/usage.md","sourceDirName":".","slug":"/usage/","permalink":"/usage/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"slug":"/usage/"},"sidebar":"mainSidebar","previous":{"title":"Setup","permalink":"/setup/"},"next":{"title":"Connectors","permalink":"/connectors/"}}');var a=s(4848),t=s(8453);const c={slug:"/usage/"},o="Usage",l={},r=[{value:"Configuration",id:"configuration",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Trigger and timeline",id:"trigger-and-timeline",level:3},{value:"Framework",id:"framework",level:3},{value:"Task",id:"task",level:3},{value:"Simple Task",id:"simple-task",level:4},{value:"Value Get/Set",id:"value-getset",level:5},{value:"Influence UI",id:"influence-ui",level:5},{value:"Log",id:"log",level:5},{value:"Trace",id:"trace",level:5},{value:"Status",id:"status",level:5},{value:"Best practice",id:"best-practice",level:6},{value:"Composite Task",id:"composite-task",level:4},{value:"Settler Task",id:"settler-task",level:5}];function _(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",header:"header",img:"img",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"usage",children:"Usage"})}),"\n",(0,a.jsxs)(n.p,{children:["Essentially, ",(0,a.jsx)(n.strong,{children:"mdVC"})," is plugged in AVC technically in the BADI enhancement spot ",(0,a.jsx)(n.code,{children:"vch_hl_es_core"}),".",(0,a.jsx)(n.br,{}),"\n","The BADI provides filter values for:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"configuration_context"})," Context, which is calling the variant configuration"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"cfg_object_type"})," Name of database table for object"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"cfg_object_key"})," Key of configurable object"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"plant"})," Plant"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["which can be used to determine the actual implementation and whether ",(0,a.jsx)(n.strong,{children:"mdVC"})," is to be used for a specific use case or not."]}),"\n",(0,a.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsxs)(n.p,{children:["Usually, when using ",(0,a.jsx)(n.strong,{children:"mdVC"})," we recommend to keep the model lean and model complex logic and dependencies in ",(0,a.jsx)(n.strong,{children:"mdVC"})," exclusively.",(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.img,{alt:"PMEVC example",src:s(5094).A+"",width:"489",height:"548"})]}),"\n",(0,a.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,a.jsxs)(n.p,{children:["Create a BADI implementation for BADI ",(0,a.jsx)(n.code,{children:"vch_hl_es_core-vch_hl_post_validate_assign"})," and maintain (if required) appropriate filter values.",(0,a.jsx)(n.br,{}),"\n","In your newly created implementation class, navigate to ",(0,a.jsx)(n.code,{children:"if_vch_hl_post_validate_assign~assign_values"}),". This is where we call implementations done in ",(0,a.jsx)(n.strong,{children:"mdVC"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"trigger-and-timeline",children:"Trigger and timeline"}),"\n",(0,a.jsxs)(n.p,{children:["The spot ",(0,a.jsx)(n.code,{children:"if_vch_hl_post_validate_assign~assign_values"})," is called from AVC ",(0,a.jsx)(n.strong,{children:"after"})," executing and validating the configuration model (which is usually very lean as already mentioned)."]}),"\n",(0,a.jsx)(n.h3,{id:"framework",children:"Framework"}),"\n",(0,a.jsxs)(n.p,{children:["The BADI implementation is the glue and is intended to define the behavior and flow of ",(0,a.jsx)(n.strong,{children:"mdVC"}),". Every call looks the same. In your implementation class follow this pattern:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-abap",children:'/mxp/vcha_cl_va_engine=>factory(\n  i_badi_implementation = me\n  i_explosion_date = ref #( explosion_date )\n  i_hierarchy = ref #( hierarchy )\n  i_characteristics = ref #( characteristics )\n  i_values = ref #( values )\n  i_bill_of_materials = ref #( bill_of_materials )\n  i_assign_by_value = ref #( assign_by_value )\n  i_assign_by_key = ref #( assign_by_key )\n  i_unassign = ref #( unassign )\n)->process( new /mxp/vcha_cl_va_task_composite( value #( "task list, one after each other\n    ( new zcl_your_task( ) ) "task implementation(s) to be replaced\n) ) ).\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The class ",(0,a.jsx)(n.code,{children:"/mxp/vcha_cl_va_engine"})," is the entry point to ",(0,a.jsx)(n.strong,{children:"mdVC"}),". All ",(0,a.jsx)(n.strong,{children:"mdVC"})," specific logic is wrapped within the engine. This is the only touch-point with the AVC BADI implementation.",(0,a.jsx)(n.br,{}),"\n","The engine is for holding/accessing all information of the configuration, and for executing a so called ",(0,a.jsx)(n.a,{href:"#task",children:"task"})," (which can be a ",(0,a.jsx)(n.a,{href:"#simple-task",children:"simple"})," or a ",(0,a.jsx)(n.a,{href:"#composite-task",children:"composite task"}),") - controlling the behavior.",(0,a.jsx)(n.br,{}),"\n","In the example above, ",(0,a.jsx)(n.code,{children:"zcl_your_task"})," is the name of a class implementing the ",(0,a.jsx)(n.strong,{children:"mdVC"})," interface for a single task, where data can be read, changed, validated, error messages issued, trace logs written, ..."]}),"\n",(0,a.jsx)(n.h3,{id:"task",children:"Task"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"mdVC"})," comes, from a framwork side, with a predefined set of usable tasks. They do not contain any logic and are intentend only to define the the execution flow. For actual logic, see ",(0,a.jsx)(n.a,{href:"/connectors/",children:"Connectors"})," or simply create your task inheriting from ",(0,a.jsx)(n.code,{children:"/MXP/VCHA_CL_VA_TASK_SIMPLE"}),".",(0,a.jsx)(n.br,{}),"\n","Below you will find the usable tasks you can use to define the behavior of ",(0,a.jsx)(n.strong,{children:"mdVC"}),", ",(0,a.jsx)("span",{class:"refTextToHighlightedMermaidClass",children:"highlighted"}),"."]}),"\n",(0,a.jsx)(n.mermaid,{value:"---\nconfig:\n    class:\n      hideEmptyMembersBox: true\n---\n%%{init: {'theme':'neutral'}}%%\nclassDiagram\n\nclass `/mxp/vcha_if_va_task` {\n  +execute(i_engine: ref to /mxp/vcha_if_va_engine, i_log: ref to /mxp/vcha_if_log, i_parent_task: ref to /mxp/vcha_if_va_task)\n}\n\nclass `/mxp/vcha_if_va_task_composite` {\n  +m_tasks: /mxp/vcha_if_va_task=>t_tasks\n  +add_task(i_task: ref to /mxp/vcha_if_va_task): ref to /mxp/vcha_if_va_task_composite\n  +remove_task(i_task: ref to /mxp/vcha_if_va_task): ref to /mxp/vcha_if_va_task_composite\n}\n\nclass `/mxp/vcha_cl_va_task` {\n  <<abstract>>\n}\n\nclass `/mxp/vcha_cl_va_task_composite`:::highlightedMermaidClass {\n  +constructor(i_tasks: /mxp/vcha_if_va_task=>t_tasks)\n  +/mxp/vcha_if_va_task~execute()\n}\n\nclass `/mxp/vcha_cl_va_task_settler`:::highlightedMermaidClass {\n  +constructor(i_tasks: /mxp/vcha_if_va_task=>t_tasks, i_max_attempts: i)\n  +/mxp/vcha_if_va_task~execute()\n  +c_max_attempts: constant\n}\n\nclass `/mxp/vcha_cl_va_task_simple`:::highlightedMermaidClass {\n  <<abstract>>\n}\n\n\n`/mxp/vcha_cl_va_task` ..|> `/mxp/vcha_if_va_task`\n`/mxp/vcha_cl_va_task` <|-- `/mxp/vcha_cl_va_task_simple`\n`/mxp/vcha_cl_va_task` <|-- `/mxp/vcha_cl_va_task_composite`\n`/mxp/vcha_cl_va_task_composite` ..|> `/mxp/vcha_if_va_task_composite`\n`/mxp/vcha_cl_va_task_composite` <|-- `/mxp/vcha_cl_va_task_settler`"}),"\n",(0,a.jsx)(n.h4,{id:"simple-task",children:"Simple Task"}),"\n",(0,a.jsxs)(n.p,{children:["This type of task is ready for redefinition in ",(0,a.jsx)(n.code,{children:"Z"})," and thus adding some logic in ",(0,a.jsx)(n.code,{children:"ABAP"}),". This task is basically a single task, which has exactly one purpose, like validation, or like determination of some sophisticated value. In most of the cases simply inherit from ",(0,a.jsx)(n.code,{children:"/mxp/vcha_cl_va_task_simple"}),". You are forced to redefine the method ",(0,a.jsx)(n.code,{children:"/mxp/vcha_if_va_task~execute"})," which is called from the framework and gives access to all the parts mentioned in the sub-headings below. Here you will find an example implementation, which can just linked"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-abap",children:"class zcl_your_task definition public create public inheriting from /mxp/vcha_cl_va_task_simple.\n  public section.\n    methods /mxp/vcha_if_va_task~execute redefinition.\nendclass.\n\nclass zcl_your_task implementation.\n  method /mxp/vcha_if_va_task~execute.\n    \"get THICKNESS\n    data(l_thickness) = i_engine->m_container->get_characteristic_by_name( i_instance_id = i_engine->m_container->m_root_instance_id i_cstic_name = 'THICKNESS' ).\n    data(l_thickness_val) = i_engine->m_container->get_assigned_value_for_cstic( l_thickness->key ).\n\n    \"get THICKNESS2\n    data(l_thickness2) = i_engine->m_container->get_characteristic_by_name( i_instance_id = i_engine->m_container->m_root_instance_id i_cstic_name = 'THICKNESS2' ).\n    data(l_thickness2_val) = i_engine->m_container->get_assigned_value_for_cstic( l_thickness2->key ).\n\n    \"write max of THICKNESS or THICKNESS2 to THICKNESS_MAX\n    i_engine->m_container->assign_value(\n      value #( key             = i_engine->m_container->get_characteristic_by_name( i_instance_id = i_engine->m_container->m_root_instance_id i_cstic_name = 'THICKNESS_MAX' )->key\n               value_float     = cond #( when l_thickness_val->value_float_min > l_thickness2_val->value_float_min\n                                           then l_thickness_val->value_float_min\n                                           else l_thickness2_val->value_float_min ) ) ).\n  endmethod.\nendclass.\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Most of the time in custom coding, we want access characteristics by its NAME. That's why it's needed to call ",(0,a.jsx)(n.code,{children:"get_characteristic_by_name"}),". If not returned, the characteristic was not found within the configuration and indicates an model error."]})}),"\n",(0,a.jsx)(n.h5,{id:"value-getset",children:"Value Get/Set"}),"\n",(0,a.jsxs)(n.p,{children:["Setting and getting values can be done with using methods of interface ",(0,a.jsx)(n.code,{children:"/mxp/vcha_if_va_container"}),". The actual Container holds all the information about the context, characteristics in the configuration and all the values (assigned or not).",(0,a.jsx)(n.br,{}),"\n","You can simply access the container with ",(0,a.jsx)(n.code,{children:"i_engine->m_container"}),". For a value get/set example, please see ",(0,a.jsx)(n.a,{href:"#simple-task",children:"above"}),"."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:['There are different types of "assignment types": user input, determination, ... Most of the time, user input has priority before determination. So if needed, handle the assignment type poperly (',(0,a.jsx)(n.code,{children:"/mxp/vcha_if_va_container=>c_assignment_types-user_input"}),")."]})}),"\n",(0,a.jsx)(n.h5,{id:"influence-ui",children:"Influence UI"}),"\n",(0,a.jsx)(n.p,{children:"The different UI facets in AVC context"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"read-only"}),"\n",(0,a.jsx)(n.li,{children:"hidden"}),"\n",(0,a.jsx)(n.li,{children:"mandatory"}),"\n",(0,a.jsx)(n.li,{children:"value exclusion"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["can be read and set via methods of interface ",(0,a.jsx)(n.code,{children:"/mxp/vcha_if_va_session_bridge"}),". The so called session bridge provides access to the AVC session and allows to influence the UI.\nYou can simply access the session with ",(0,a.jsx)(n.code,{children:"i_engine->m_session"}),". Please find an example for hiding some characteristic based on values in configuration below:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-abap",children:"class zcl_my_task definition public create public inheriting from /mxp/vcha_cl_va_task_simple.\n  public section.\n    methods /mxp/vcha_if_va_task~execute redefinition.\n  protected section.\n  private section.\nendclass.\n\nclass zcl_my_task implementation.\n  method /mxp/vcha_if_va_task~execute.\n    \"get product type value\n    data(l_product_type) = i_engine->m_container->get_assigned_value_for_cstic(\n      i_engine->m_container->get_characteristic_by_name( i_instance_id = i_engine->m_container->m_root_instance_id i_cstic_name = 'PRODUCT_TYPE' )->key ).\n\n    \"determine whether to hide attribute and hide it or not\n    i_engine->m_session->set_cstic_hidden(\n      i_key       = i_engine->m_container->get_characteristic_by_name( i_instance_id = i_engine->m_container->m_root_instance_id i_cstic_name = 'LENGTH' )->key\n      i_is_hidden = cond #( when l_product_type->value_string = 'COIL' then if_vch_hl_post_validate_assign=>gc_boolean-true ) ).\n  endmethod.\nendclass.\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"This is not a complete example. Eventually already assigned values needs to be unassigned, too. This example only focuses on UI influence."})}),"\n",(0,a.jsx)(n.h5,{id:"log",children:"Log"}),"\n",(0,a.jsxs)(n.p,{children:["In your implementation you can add any messages (of any type) to the log by calling methods of interface ",(0,a.jsx)(n.code,{children:"/mxp/vcha_if_log"}),". As the log is tied to the session you can access the log for the session via ",(0,a.jsx)(n.code,{children:"i_engine->m_session->m_log"}),".",(0,a.jsx)(n.br,{}),"\n","Please find an example for adding some custom messages below:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-abap",children:"class zcl_my_task definition public create public inheriting from /mxp/vcha_cl_va_task_simple.\n  public section.\n    methods /mxp/vcha_if_va_task~execute redefinition.\n  protected section.\n  private section.\nendclass.\n\nclass zcl_my_task implementation.\n  method /mxp/vcha_if_va_task~execute.\n    message e899(v1) with 'test message' into data(l_message_text).\n    i_engine->m_session->m_log->add_sy_message( ).\n  endmethod.\nendclass.\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Error messages do not result in a erroneous status automatically. As for the example above, it only adds the message to the log.",(0,a.jsx)(n.br,{}),"\n","Please see section ",(0,a.jsx)(n.a,{href:"#status",children:"Status"})," to learn how to set status accordingly (or derive whether there are error messages)."]})}),"\n",(0,a.jsxs)(n.p,{children:["In AVC, the messages will be displayed in the standard message popover:\n",(0,a.jsx)(n.img,{alt:"Message Popover",src:s(4412).A+"",width:"456",height:"495"})]}),"\n",(0,a.jsx)(n.h5,{id:"trace",children:"Trace"}),"\n",(0,a.jsxs)(n.p,{children:["Similar to the ",(0,a.jsx)(n.a,{href:"#log",children:"Log"})," handling, additional infos can be written to the standard AVC trace. It is intentended to provide additional hints to understand complex situations.",(0,a.jsx)(n.br,{}),"\n","The trace can be accessed with methods of interface ",(0,a.jsx)(n.code,{children:"/mxp/vcha_if_trace"}),". As the trace too is tied to the session you can access the trace for the session via ",(0,a.jsx)(n.code,{children:"i_engine->m_session->m_trace"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-abap",children:"class zcl_my_task definition create public inheriting from /mxp/vcha_cl_va_task_simple.\n  public section.\n    methods /mxp/vcha_if_va_task~execute redefinition.\n  protected section.\n  private section.\nendclass.\n\nclass zcl_my_task implementation.\n  method /mxp/vcha_if_va_task~execute.\n    message e899(v1) with 'test trace message' into data(l_message_text).\n    i_engine->m_session->m_trace->add_sy_message( ).\n  endmethod.\nendclass.\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The result will look like this:\n",(0,a.jsx)(n.img,{alt:"trace in AVC",src:s(704).A+"",width:"1838",height:"761"})]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["For hints which are again very complex to give, call method ",(0,a.jsx)(n.code,{children:"/mxp/vcha_if_trace->is_active( )"})," to check if the user needs a detail analysis."]})}),"\n",(0,a.jsx)(n.h5,{id:"status",children:"Status"}),"\n",(0,a.jsxs)(n.p,{children:["In your implementation you can influence the status of the configuration by calling methods of interface ",(0,a.jsx)(n.code,{children:"/mxp/vcha_if_status"}),". As the status is tied to the session you can access the status for the session via ",(0,a.jsx)(n.code,{children:"i_engine->m_session->m_status"}),".",(0,a.jsx)(n.br,{}),"\n","Please find an example for influencing the status below:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-abap",children:"class zcl_my_task definition create public inheriting from /mxp/vcha_cl_va_task_simple.\n  public section.\n    methods /mxp/vcha_if_va_task~execute redefinition.\n  protected section.\n  private section.\nendclass.\n\nclass zcl_my_task implementation.\n  method /mxp/vcha_if_va_task~execute.\n    data(l_thickness) = i_engine->m_container->get_assigned_value_for_cstic( i_engine->m_container->get_characteristic_by_name( i_instance_id = i_engine->m_container->m_root_instance_id i_cstic_name = 'THICKNESS' )->key ).\n\n    if l_thickness is not bound or l_thickness->value_float_min <= 0.\n      i_engine->m_session->m_status->set_incomplete( ).\n    else.\n      i_engine->m_session->m_status->set_released( ).\n    endif.\n  endmethod.\nendclass.\n"})}),"\n",(0,a.jsx)(n.h6,{id:"best-practice",children:"Best practice"}),"\n",(0,a.jsxs)(n.p,{children:['Most of the time, the user expects an error message when the configuration is "Incomplete".',(0,a.jsx)(n.br,{}),"\n","Our best practice is, to use a ",(0,a.jsx)(n.a,{href:"#composite-task",children:"Composite Task"})," as top level task, issue error messages (or not) within a simple task and then add the generic class ",(0,a.jsx)(n.code,{children:"/mxp/vcha_cl_va_log_to_status"})," as the last one for the composite task.",(0,a.jsx)(n.br,{}),"\n",'The class simply looks for any error message in the log. If there is any, the status "Incomplete" is set. If not, the Status "Released" is set. Quite simple implementation, but in most of the cases this is the required behavior. Here is an example for our initial behavior defintion within the BADI implementation.']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-abap",children:'/mxp/vcha_cl_va_engine=>factory(\n  i_badi_implementation = me\n  i_explosion_date = ref #( explosion_date )\n  i_hierarchy = ref #( hierarchy )\n  i_characteristics = ref #( characteristics )\n  i_values = ref #( values )\n  i_bill_of_materials = ref #( bill_of_materials )\n  i_assign_by_value = ref #( assign_by_value )\n  i_assign_by_key = ref #( assign_by_key )\n  i_unassign = ref #( unassign )\n)->process( new /mxp/vcha_cl_va_task_composite( value #( "task list, one after each other\n    ( new zcl_your_task( ) ) "task implementation(s) to be replaced\n    ( new /mxp/vcha_cl_va_log_to_status( ) ) "evaluates error messages and sets status\n) ) ).\n'})}),"\n",(0,a.jsx)(n.h4,{id:"composite-task",children:"Composite Task"}),"\n",(0,a.jsxs)(n.p,{children:["A composite task is basically just another task which can be either directly given to the ",(0,a.jsx)(n.a,{href:"#framework",children:"engine"}),", or stacked in another composite task.",(0,a.jsx)(n.br,{}),"\n","It contains one to many tasks (simple or composite), and executes it sequentially one after the other. Using composite tasks, we can define quite complex behaviors."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-abap",children:'/mxp/vcha_cl_va_engine=>factory(\n  i_badi_implementation = me\n  i_explosion_date = ref #( explosion_date )\n  i_hierarchy = ref #( hierarchy )\n  i_characteristics = ref #( characteristics )\n  i_values = ref #( values )\n  i_bill_of_materials = ref #( bill_of_materials )\n  i_assign_by_value = ref #( assign_by_value )\n  i_assign_by_key = ref #( assign_by_key )\n  i_unassign = ref #( unassign )\n)->process( new /mxp/vcha_cl_va_task_composite( value #( "task list, one after each other\n    ( new zcl_initialize_some_things( ) ) "task implementation(s) to be replaced\n    ( new /mxp/vcha_cl_va_task_composite( value #(\n        ( new zcl_do_something( ) )\n        ( new zcl_do_something2( ) )\n      ) ) )\n    ( new /mxp/vcha_cl_va_log_to_status( ) ) "evaluates error messages and sets status\n) ) ).\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Thus this example does not make much too sense, as the ",(0,a.jsx)(n.code,{children:"zcl_do_something"})," and ",(0,a.jsx)(n.code,{children:"zcl_do_something2"})," could have been easily added to the first composite task too, it shows the idea behind.",(0,a.jsx)(n.br,{}),"\n","There are use-cases like we need to do things in a loop, where stacking composite tasks makes sense. Important to know: Any task can be added, as long as it implements the ",(0,a.jsx)(n.strong,{children:"mdVC"})," task interface ",(0,a.jsx)(n.code,{children:"/mxp/vcha_if_va_trace"}),"."]}),"\n",(0,a.jsx)(n.h5,{id:"settler-task",children:"Settler Task"}),"\n",(0,a.jsxs)(n.p,{children:["A settler task is a special implementation of a composite task and essentially repeats the contained tasks as long as the values in the container reach stability.",(0,a.jsx)(n.br,{}),"\n","An Example:\nCharacteristicA influences CharacteristicB and vice versa. As soon as one Characteristic changes we need to repeat the other. As long as the values reach stability (do not influence each other anymore).",(0,a.jsx)(n.br,{}),"\n","A settler task simply executes every contained task sequentially, just like any other composite task, but does that in a loop."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-abap",children:'/mxp/vcha_cl_va_engine=>factory(\n  i_badi_implementation = me\n  i_explosion_date = ref #( explosion_date )\n  i_hierarchy = ref #( hierarchy )\n  i_characteristics = ref #( characteristics )\n  i_values = ref #( values )\n  i_bill_of_materials = ref #( bill_of_materials )\n  i_assign_by_value = ref #( assign_by_value )\n  i_assign_by_key = ref #( assign_by_key )\n  i_unassign = ref #( unassign )\n)->process( new /mxp/vcha_cl_va_task_composite( value #( "task list, one after each other\n    ( new zcl_initialize_some_things( ) ) "task implementation(s) to be replaced\n    ( new /mxp/vcha_cl_va_task_settler( value #( "repeat until values reaches stability\n        ( new zcl_calc_b_based_on_a( ) )\n        ( new zcl_calc_a_based_on_b( ) )\n      ) ) )\n    ( new /mxp/vcha_cl_va_log_to_status( ) ) "evaluates error messages and sets status\n) ) ).\n'})}),"\n",(0,a.jsxs)(n.p,{children:["When using ",(0,a.jsx)(n.a,{href:"/connectors/cds/",children:"CDS views"})," and defining dependencies between characteristics with view attributes, a task settler normally is needed as the cds view will get executed as long as all dependencies were resolved."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(_,{...e})}):_(e)}},704:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/image_004-bf9643fc248b1f0686bbd4bf82fc0ba7.png"},4412:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/image_003-979770bf5f2a537b20196236236f4666.png"},5094:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/image_002-86f3bfa22f28c4acf016befd6127b3a0.png"}}]);